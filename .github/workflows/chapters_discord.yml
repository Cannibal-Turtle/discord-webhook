# .github/workflows/chapters_discord.yml
name: Check RSS & Send Chapters

# ──────────────────────────────────────────────────────────────────────────────
# Never run two of these at the same time
concurrency:
  group: rss-to-discord-chapters
  cancel-in-progress: false

on:
  schedule:
    - cron: '0 15 * * *'       # daily at 15:00 UTC
  repository_dispatch:
    types: [trigger-discord-notify]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  chapters:
    runs-on: ubuntu-latest

    steps:
      # 1) Grab the code (including state_rss.json)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2) Install Python & deps
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install discord.py feedparser python-dateutil

      # 3) Run FREE bot when schedule OR dispatch.feed=free
      - name: Run Free Chapters Bot
        if: >
          github.event_name == 'schedule' ||
          github.event_name == 'workflow_dispatch' ||
          (github.event_name == 'repository_dispatch' && github.event.client_payload.feed == 'free')
        timeout-minutes: 5
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_FREE_CHAPTERS_CHANNEL: ${{ secrets.DISCORD_FREE_CHAPTERS_CHANNEL }}
        run: python bot_free_chapters.py

      # 4) Run PAID bot when schedule OR dispatch.feed=paid
      - name: Run Paid Chapters Bot
        if: >
          github.event_name == 'schedule' ||
          github.event_name == 'workflow_dispatch' ||
          (github.event_name == 'repository_dispatch' && github.event.client_payload.feed == 'paid')
        timeout-minutes: 5
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_ADVANCE_CHAPTERS_CHANNEL: ${{ secrets.DISCORD_ADVANCE_CHAPTERS_CHANNEL }}
        run: python bot_paid_chapters.py

      # 6) Commit whatever changed in state_rss.json
      - name: Sync & commit state_rss.json
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # fetch any updates (should be none, since concurrency locked)
          git pull origin main --rebase --autostash
          git add state_rss.json
          if git diff --cached --quiet; then
            echo "No state changes to commit."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "ci: update state_rss.json"
            git push origin main
          fi
